version: "3"

services:
    router:
        build: ./router
        ports:
            - ${ROUTER_PORT}:80
        #    - 443:443
        volumes:
            - ./router/templates:/etc/nginx/templates/
            - ./router/cdn:/www/files/assets
            - ./storage/frontend:/www/files/frontend

        env_file:
            - ./.env
        environment:
            NGINX_ENVSUBST_TEMPLATE_SUFFIX: ".conf"
        depends_on:
            - api
            - frontend

    scraper:
        build:
            context: ./scraper
            dockerfile: ./Dockerfile.${LOCAL}
        volumes:
            - ./scraper/src:/src/src
        env_file:
            - ./.env
        restart: unless-stopped
        depends_on:
            - mongo

    api:
        build:
            context: ./api
            dockerfile: ./Dockerfile.${LOCAL}
        volumes:
            - ./api/src:/src/src
        env_file:
            - ./.env
        restart: unless-stopped
        depends_on:
            - search_engine
            - mongo

    mongo:
        image: mongo
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
        restart: unless-stopped
        ports:
            - ${MONGO_PORT}:27017
        volumes:
            - ./storage/mongo:/data/db
            - ./conf:/etc/mongo
            - ./logs/mongo:/logs

    image_cropper:
        image: h2non/imaginary:latest
        environment:
            PORT: 9000
        command: -enable-url-source

    redis:
        image: "redis"
        command: redis-server
        volumes:
            - ./storage/redis/data:/data
        ports:
            - "${REDIS_PORT}:6379"
        restart: unless-stopped

    search_engine:
        image: "getmeili/meilisearch"
        env_file:
            - ./.env
        ports:
            - "7700:7700"

    frontend:
        build:
            context: ./frontend
            dockerfile: ./Dockerfile
        volumes:
            - ./storage/frontend:/app/dist
